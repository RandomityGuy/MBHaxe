# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
    android: circleci/android@2.3.0 # The Windows orb give you everything you need to start using the Windows executor.
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    executor: 
        name: android/android-machine
        shell: bash.exe # executor type
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
        - add_ssh_keys:
            fingerprints:
                - "82:42:56:a0:57:43:95:4e:00:c0:8c:c1:7f:70:74:47"
  
        - checkout
        - run:
            name: Install dependencies
            command: |
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/sdl.zip https://www.libsdl.org/release/SDL2-devel-2.0.5-VC.zip
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/openal.zip https://openal-soft.org/openal-binaries/openal-soft-1.17.2-bin.zip
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/ffmpeg.zip https://github.com/HaxeFoundation/hashlink/files/5648056/ffmpeg-3.4.2-win64-dev.zip
              cd /tmp
              7z x /tmp/sdl.zip    -oinclude; mv /tmp/include/SDL2*   /tmp/include/sdl
              7z x /tmp/openal.zip -oinclude; mv /tmp/include/openal* /tmp/include/openal
              7z x /tmp/ffmpeg.zip -oinclude; mv /tmp/include/ffmpeg* /tmp/include/ffmpeg
        - android/install-ndk: 
            version: 18.1.5063045
        - run:
            name: Install Neko
            command: |
              choco install --no-progress neko -y
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
        - run:
            name: Install Haxe
            command: |
              download_url="https://github.com/HaxeFoundation/haxe/releases/download/4.2.5/haxe-4.2.5-win64.zip"
              echo "Downloading [$download_url]..."
              mkdir /tmp/haxe
              curl -fsSL --retry 3 --retry-delay 5 "$download_url" -o /tmp/haxe.zip
              7z x /tmp/haxe.zip -o/tmp
              mv -v /tmp/haxe_* /tmp/haxe
              cd /tmp/haxe
              mv haxe_* haxe
              export PATH=/tmp/haxe/haxe:"$PATH"
              export HAXE_STD_PATH=/tmp/haxe/haxe/std
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
              haxelib setup ~/haxelib
              haxelib list
        - run:
            name: Install haxe dependencies
            command: |
              export PATH=/tmp/haxe/haxe:"$PATH"
              export HAXE_STD_PATH=/tmp/haxe/haxe/std
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
              haxelib git heaps https://github.com/RandomityGuy/heaps
              haxelib dev hlopenal ~/deps/hashlink/libs/openal
              haxelib dev hlsdl ~/deps/hashlink/libs/sdl
              haxelib dev hashlink ~/deps/hashlink/other/haxelib
        - run:
            name: Compile MBHaxe
            command: |
              export PATH=/tmp/haxe/haxe:"$PATH"
              export HAXE_STD_PATH=/tmp/haxe/haxe/std
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
              cd ~/project
              git clone https://github.com/RandomityGuy/MBHaxeAndroidLibs
              haxe compile-c.hxml
              cd native


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-android:
    jobs:
      - build:
          filters:
            tags:
              only: /^\d+.\d+.\d+$/
